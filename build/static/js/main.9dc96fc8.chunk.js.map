{"version":3,"sources":["theme.js","components/Header/ThemePicker/ThemePicker.js","components/Header/Header.js","shared/Card/Card.js","components/IotButton/IotButton.js","components/LineChart/LineChart.js","components/Preferences/Preferences.js","components/SensorPicker/SensorPicker.js","Main.js","index.js","assets/moon.svg","assets/sun.svg","assets/logo.svg","assets/watering.svg"],"names":["theme","colors","text","background","backgroundSecondary","muted","modes","light","dark","ThemePicker","_useColorMode","useColorMode","_useColorMode2","Object","slicedToArray","colorMode","setColorMode","index_esm","className","onClick","sx","color","width","src","require","alt","Header","bg","ThemePicker_ThemePicker","Card","props","title","body","IotButton","sensorName","sensorInFocus","_useState","useState","_useState2","spinner","addSpinner","sendIrrigationRequest","fetch","concat","process","then","res","json","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","result","wrap","_context","prev","next","stop","_x","apply","this","arguments","error","console","log","id","marginLeft","lineHeight","LineChart","context","useThemeUI","chartRef","React","createRef","dataFilter","setDataFilter","_useState3","labels","datasets","label","fill","data","borderWidth","backgroundColor","borderColor","_useState4","chartData","setChartData","options","responsive","maintainAspectRatio","animation","duration","easing","elements","point","radius","scales","yAxes","ticks","fontColor","maxTicksLimit","position","xAxes","gridLines","display","maxRotation","minRotation","callback","value","Date","toLocaleTimeString","second","minute","hour","toLocaleDateString","day","month","legend","tooltips","enabled","useEffect","loadData","liveData","timestamps","capacities","map","timestamp","capacity","intervall","setInterval","clearInterval","onChange","e","filter","selectFilter","target","dataset","es","ref","Preferences","minIrrigationIntervalInMinutes","irrigationTimeInSeconds","capacityBuffer","signalPin","preferences","setPreferences","databasePreferences","setDatabasePreferences","objectSpread2","parseInt","updatePreferences","key","headers","Content-Type","method","JSON","stringify","_ref2","_callee2","_context2","_x2","preferenceBorderColor","type","SensorPicker","sensors","length","sensor","setSensorInFocus","Main","setSensors","getSensors","components_Header_Header","components_SensorPicker_SensorPicker","shared_Card_Card","components_LineChart_LineChart","components_Preferences_Preferences","components_IotButton_IotButton","App","react_default","createElement","src_Main","rootElement","document","getElementById","ReactDOM","render","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.9dc96fc8.chunk.js","sourcesContent":["const theme = {\n  colors: {\n    text: \"white\",\n    background: \"#161A30\",\n    backgroundSecondary: \"#262F4D\",\n    muted: \"#fff\",\n    modes: {\n      light: {\n        text: \"#262F4D\",\n        background: \"white\",\n        backgroundSecondary: \"white\",\n        muted: \"#444\"\n      },\n      dark: {\n        text: \"white\",\n        background: \"#161A30\",\n        backgroundSecondary: \"#262F4D\",\n        muted: \"#fff\"\n      }\n    }\n  }\n};\n\nexport default theme;\n","/** @jsx jsx */\nimport { jsx } from \"theme-ui\";\nimport { useColorMode } from \"theme-ui\";\n\nconst ThemePicker = () => {\n  const [colorMode, setColorMode] = useColorMode();\n  return (\n    <button\n      className=\"toggler\"\n      onClick={() => setColorMode(colorMode === \"light\" ? \"dark\" : \"light\")}\n    >\n      <div sx={{ color: \"text\" }}>\n        {colorMode === \"light\" ?\n          <img width=\"20px\" src={require('../../../assets/moon.svg')} alt=\"dark\" /> :\n          <img width=\"20px\" src={require('../../../assets/sun.svg')} alt=\"light\" />\n        }\n      </div>\n    </button>\n  );\n};\n\nexport default ThemePicker;\n","/** @jsx jsx */\nimport { jsx } from \"theme-ui\";\nimport \"./Header.css\";\nimport ThemePicker from \"./ThemePicker/ThemePicker\";\n\nconst Header = () => {\n  return (\n    <header sx={{ bg: \"backgroundSecondary\" }}>\n      <h1 className=\"logo-text\" sx={{ color: \"text\" }}>\n        <img src={require('../../assets/logo.svg')} alt=\"logo\" />\n        smart irrigation\n      </h1>\n      <ThemePicker />\n    </header>\n  );\n};\n\nexport default Header;\n","/** @jsx jsx */\nimport { jsx } from \"theme-ui\";\nimport \"./Card.css\";\n\nconst Card = props => {\n  return (\n    <div sx={{ bg: \"backgroundSecondary\" }} className=\"card\">\n      {props.title ? (\n        <div>\n          <h2>\n            {props.title}\n            <div className=\"separator\" />\n          </h2>\n\n        </div>\n      ) : (\n          <div />\n        )}\n      {props.body}\n    </div>\n  );\n};\n\nexport default Card;\n","/** @jsx jsx */\nimport { jsx } from \"theme-ui\";\nimport \"./IotButton.css\";\nimport { useState } from \"react\";\n\nconst IotButton = props => {\n  const sensorName = props.sensorInFocus\n  const [spinner, addSpinner] = useState(false);\n\n  const sendIrrigationRequest = () => {\n    addSpinner(true)\n    fetch(`${process.env.REACT_APP_BACKEND_URL}/sensors/irrigation/${sensorName}`)\n      .then(res => res.json())\n      .then(\n        async (result) => {\n          addSpinner(false)\n        },\n        (error) => {\n          console.log(`Coudn't fetch data. Error: ${error}`)\n        }\n      )\n  }\n\n  return (\n    <div className=\"iot-button\">\n      <button\n        sx={{\n          background:\n            spinner === false\n              ? \"linear-gradient(90deg, #598bff, #3366FF)\"\n              : \"grey\"\n        }}\n        onClick={() => sendIrrigationRequest()}\n      >\n        {spinner === false ? <img width=\"40px\" src={require('../../assets/watering.svg')} alt=\"dark\" /> : <div id=\"loading\" />}\n      </button>\n      <h3 sx={{ color: \"text\", marginLeft: \"12px\", lineHeight: \"23px\" }}>\n        Start Manual Irrigation <br />\n        {spinner === false ? \"OFF\" : \"ON\"}\n      </h3>\n    </div>\n  );\n};\n\nexport default IotButton;\n","/** @jsx jsx */\nimport { jsx, useThemeUI } from \"theme-ui\";\nimport React, { useState, useEffect } from 'react'\nimport { Line } from \"react-chartjs-2\";\nimport \"./LineChart.css\";\n\nconst LineChart = props => {\n  const sensorName = props.sensorInFocus\n  const capacityFactor = 100000\n  const requestIntervall = 1000\n  const context = useThemeUI()\n  const chartRef = React.createRef();\n  const [dataFilter, setDataFilter] = useState(\"day\");\n  const [chartData, setChartData] = useState({\n    labels: [],\n    datasets: [{\n      label: 'Irrigation',\n      fill: true,\n      data: [],\n      borderWidth: 2,\n      backgroundColor: 'rgba(4, 214, 144, 0.1)',\n      borderColor: 'rgba(4, 214, 143, 1)',\n    }]\n  });\n  const options = {\n    responsive: true,\n    maintainAspectRatio: false,\n    animation: {\n      duration: 300,\n      easing: 'linear'\n    },\n    elements: {\n      point: {\n        radius: 0\n      }\n    },\n    scales: {\n      yAxes: [\n        {\n          ticks: {\n            fontColor: context.theme.colors.text,\n            maxTicksLimit: 10\n          },\n          id: 'y-axis-0',\n          position: 'left',\n        },\n      ],\n      xAxes: [{\n        gridLines: {\n          display: false,\n        },\n        ticks: {\n          fontColor: context.theme.colors.text,\n          maxTicksLimit: 4,\n          maxRotation: 0,\n          minRotation: 0,\n          callback: function (value) {\n            if (dataFilter === \"minute\") return new Date(value).toLocaleTimeString('en', { second: 'numeric' }) + 's';\n            if (dataFilter === \"hour\") return new Date(value).toLocaleTimeString('en', { minute: 'numeric' }) + 'min';\n            if (dataFilter === \"day\") return new Date(value).toLocaleTimeString('en', { hour: 'numeric' });\n            if (dataFilter === \"week\") return new Date(value).toLocaleDateString('en', { day: 'numeric', month: 'short' });\n          },\n        },\n      }]\n    },\n    legend: {\n      display: false,\n    },\n    tooltips: {\n      enabled: false,\n    },\n  };\n\n  useEffect(() => {\n    const loadData = () => {\n      fetch(`${process.env.REACT_APP_BACKEND_URL}/measurements/${dataFilter}/${sensorName}`)\n        .then(res => res.json())\n        .then(\n          async (liveData) => {\n            const timestamps = liveData.map(data => data.timestamp)\n            const capacities = liveData.map(data => capacityFactor / data.capacity)\n            setChartData({\n              labels: timestamps,\n              datasets: [{\n                fill: true,\n                data: capacities,\n                borderWidth: 2,\n                backgroundColor: 'rgba(4, 214, 144, 0.1)',\n                borderColor: 'rgba(4, 214, 143, 1)',\n              }],\n            })\n          },\n          (error) => {\n            console.log(`Coudn't fetch data. Error: ${error}`)\n          }\n        )\n    }\n\n    loadData()\n    const intervall = setInterval(() => {\n      loadData()\n    }, requestIntervall)\n\n    return () => clearInterval(intervall);\n  }, [setChartData, dataFilter, sensorName])\n\n  const selectFilter = (filter) => {\n    setDataFilter(filter)\n  }\n\n  return (\n    <div className=\"line-chart\">\n      <select sx={{ color: \"text\" }} onChange={(e) => selectFilter(e.target.value)} className=\"chart-drop-down\" value={dataFilter}>\n        <option value=\"minute\">Last Minute</option>\n        <option value=\"hour\">Last Hour</option>\n        <option value=\"day\">Last Day</option>\n        <option value=\"week\">Last Week</option>\n      </select>\n      {chartData.dataset ? <div /> : <Line ref={chartRef} data={chartData} options={options} />}\n    </div>\n  );\n};\n\nexport default LineChart;\n","/** @jsx jsx */\nimport { jsx } from \"theme-ui\";\nimport \"./Preferences.css\";\nimport { useState, useEffect } from \"react\";\n\nconst Preferences = props => {\n  const sensorName = props.sensorInFocus\n  const capacityFactor = 100000\n  const [preferences, setPreferences] = useState({\n    minIrrigationIntervalInMinutes: 0,\n    irrigationTimeInSeconds: 0,\n    capacityBuffer: 0,\n    signalPin: 0\n  });\n  const [databasePreferences, setDatabasePreferences] = useState({\n    minIrrigationIntervalInMinutes: 0,\n    irrigationTimeInSeconds: 0,\n    capacityBuffer: 0,\n    signalPin: 0\n  });\n\n  useEffect(() => {\n    if (sensorName) {\n      fetch(`${process.env.REACT_APP_BACKEND_URL}/preferences/${sensorName}`)\n        .then(res => res.json())\n        .then(\n          async (preferences) => {\n            setDatabasePreferences({ ...preferences, capacityBuffer: parseInt(capacityFactor / preferences.capacityBuffer) })\n            setPreferences({ ...preferences, capacityBuffer: parseInt(capacityFactor / preferences.capacityBuffer) })\n          },\n          (error) => {\n            console.log(`Coudn't fetch data. Error: ${error}`)\n          }\n        )\n    }\n  }, [setPreferences, sensorName])\n\n\n  const updatePreferences = (e, key) => {\n    fetch(`${process.env.REACT_APP_BACKEND_URL}/preferences/${sensorName}`, {\n      headers: { 'Content-Type': 'application/json', },\n      method: 'PUT',\n      body: JSON.stringify({ ...preferences, capacityBuffer: parseInt(capacityFactor / preferences.capacityBuffer) })\n    })\n      .then(res => res.json())\n      .then(\n        async (preferences) => {\n          setDatabasePreferences({ ...preferences, capacityBuffer: parseInt(capacityFactor / preferences.capacityBuffer) })\n        },\n        (error) => {\n          console.log(`Coudn't fetch data. Error: ${error}`)\n        }\n      )\n  }\n\n  const preferenceBorderColor = (key) => {\n    return preferences[key] === databasePreferences[key] ? \"#161A30 !important\" : \"var(--primary) !important\"\n  }\n\n  const preferenceButtonColor = () => {\n    return JSON.stringify({\n      minIrrigationIntervalInMinutes: preferences.minIrrigationIntervalInMinutes,\n      irrigationTimeInSeconds: preferences.irrigationTimeInSeconds,\n      capacityBuffer: preferences.capacityBuffer,\n      signalPin: preferences.signalPin\n    }) === JSON.stringify({\n      minIrrigationIntervalInMinutes: databasePreferences.minIrrigationIntervalInMinutes,\n      irrigationTimeInSeconds: databasePreferences.irrigationTimeInSeconds,\n      capacityBuffer: databasePreferences.capacityBuffer,\n      signalPin: databasePreferences.signalPin\n    }) ? \"#161A30 !important\" : \"var(--primary) !important\"\n  }\n\n  return (\n    <h3 sx={{ color: \"text\" }}>\n      <div className=\"preference\">\n        <h3>Irrigation time [s]:</h3>\n        <input sx={{ color: \"text\", borderColor: preferenceBorderColor(\"irrigationTimeInSeconds\") }} type=\"number\"\n          onChange={\n            (e) => setPreferences({ ...preferences, irrigationTimeInSeconds: parseInt(e.target.value) })\n          }\n          value={preferences.irrigationTimeInSeconds} />\n      </div>\n      <div className=\"preference\">\n        <h3>Minimum irrigation time interval [min]:</h3>\n        <input sx={{ color: \"text\", borderColor: preferenceBorderColor(\"minIrrigationIntervalInMinutes\") }} type=\"number\"\n          onChange={(e) => setPreferences({ ...preferences, minIrrigationIntervalInMinutes: parseInt(e.target.value) })}\n          value={preferences.minIrrigationIntervalInMinutes} />\n      </div>\n      <div className=\"preference\">\n        <h3>Minimum soil moisture:</h3>\n        <input sx={{ color: \"text\", borderColor: preferenceBorderColor(\"capacityBuffer\") }} type=\"number\"\n          onChange={(e) => setPreferences({ ...preferences, capacityBuffer: parseInt(e.target.value) })}\n          value={preferences.capacityBuffer} />\n      </div>\n      <div className=\"preference\">\n        <h3>Signal Pin:</h3>\n        <input sx={{ color: \"text\", borderColor: preferenceBorderColor(\"signalPin\") }} type=\"number\"\n          onChange={(e) => setPreferences({ ...preferences, signalPin: parseInt(e.target.value) })}\n          value={preferences.signalPin} />\n      </div>\n      <div className=\"preference\">\n        <div></div>\n        <button sx={{ color: \"text\", borderColor: preferenceButtonColor() }} onClick={() => updatePreferences()}>Submit</button>\n      </div>\n    </h3>\n  );\n};\n\nexport default Preferences;\n","/** @jsx jsx */\r\nimport { jsx } from \"theme-ui\";\r\nimport \"./SensorPicker.css\";\r\n\r\nconst SensorPicker = props => {\r\n    return (\r\n        <div className=\"sensorPicker \" sx={{ display: props.sensors.length > 1 ? \"flex\" : \"none\"}}>\r\n            {props.sensors.map((sensor) => <div key={sensor} onClick={() => props.setSensorInFocus(sensor)}\r\n                sx={{ bg: sensor === props.sensorInFocus ? \"var( --primary) !important\" : \"backgroundSecondary\" }}\r\n            className=\"card\"><h4>{sensor}</h4></div>)}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SensorPicker;\r\n","/** @jsx jsx */\nimport { jsx } from \"theme-ui\";\nimport Header from \"./components/Header/Header\";\nimport Card from \"./shared/Card/Card\";\nimport IotButton from \"./components/IotButton/IotButton\";\nimport LineChart from \"./components/LineChart/LineChart\";\nimport Preferences from \"./components/Preferences/Preferences\";\nimport SensorPicker from \"./components/SensorPicker/SensorPicker\";\nimport { useState, useEffect } from \"react\";\nimport \"./style.css\"\n\nconst Main = () => {\n  const [sensors, setSensors] = useState([]);\n  const [sensorInFocus, setSensorInFocus] = useState();\n  useEffect(() => {\n    getSensors()\n  }, [setSensors])\n\n  const getSensors = () => {\n    fetch(`${process.env.REACT_APP_BACKEND_URL}/sensors`)\n      .then(res => res.json())\n      .then(\n        async (sensors) => {\n          setSensors(sensors)\n          setSensorInFocus(sensors[0])\n        },\n        (error) => {\n          console.log(`Coudn't fetch data. Error: ${error}`)\n        }\n      )\n  }\n\n  return (\n    <div>\n      <Header />\n      <div className=\"main\">\n        <div className=\"container row\">\n          <div className=\"col-12\">\n            <SensorPicker sensors={sensors} setSensorInFocus={setSensorInFocus} sensorInFocus={sensorInFocus} />\n          </div>\n          <div className=\"col-md-12\">\n            <Card title=\"Statistics\" body={<LineChart sensorInFocus={sensorInFocus} />} />\n          </div>\n          <div className=\"col-md-6\">\n            <Card title=\"Preferences\" body={<Preferences sensorInFocus={sensorInFocus} />} />\n          </div>\n          <div className=\"col-md-6\">\n            <Card body={<IotButton sensorInFocus={sensorInFocus} />} />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Main;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { ThemeProvider, ColorMode } from \"theme-ui\";\nimport theme from \"./theme\";\nimport Main from \"./Main\";\n\nfunction App() {\n  return (\n    <ThemeProvider theme={theme}>\n      <ColorMode />\n      <Main />\n    </ThemeProvider>\n  );\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n","module.exports = __webpack_public_path__ + \"static/media/moon.5e028c86.svg\";","module.exports = __webpack_public_path__ + \"static/media/sun.0e45b318.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo.0d0b1f3c.svg\";","module.exports = __webpack_public_path__ + \"static/media/watering.ee32fdea.svg\";"],"sourceRoot":""}